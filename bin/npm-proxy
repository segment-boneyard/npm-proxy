#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander');
var express = require('express');
var format = require('url').format;
var parse = require('url').parse;
var http = require('http');

// parse

program
  .usage('[options] <registry-url ...>')
  .option('-p, --port <port>', 'port to listen on [3333]', '3333')
  .option('-u, --url <url>', 'registry url `ex: https://registry.segment.io`')
  .parse(process.argv);

// options

var registries = program.args;
if (!registries.length) throw new Error('<registries> required');
var port = parseInt(program.port, 10);
var url = program.url;

// app

var app = express();

// proxy

app.use(function(req, res, next){
  var idempotent = 'HEAD' == req.method || 'GET' == req.method;
  console.log('\n>> %s %s', req.method, req.url);
  var i = 0;

  function proxy() {
    var first = i == 0;
    var last = i == registries.length - 1;
    var registry = registries[i++];

    var userRelated = 0 == req.url.indexOf('/-/user')
      || req.url.indexOf('/_users')
      || req.url.indexOf('/publish_users')
      || req.url.indexOf('/-/user-by-email');

    var opts = parse(registry);
    opts.method = req.method;

    if (~req.url.indexOf('/registry/_design')) opts.path = req.url
    else opts.path += req.url;

    if (!first && (!idempotent || userRelated)) {
      return res.send(400, { error: 'failed to fetch' });
    }

    console.log('>>>> %s %s', req.method, opts.host + opts.path);
    var r = http.request(opts);

    r.on('response', function(r){
      console.log('<<<< %s', r.statusCode);
      var type = r.headers['content-type'] || '';

      if (!last && 404 == r.statusCode) return proxy();

      if (0 != type.indexOf('text/') &&
        0 != type.indexOf('application/json')) {
        res.writeHead(r.statusCode, r.headers);
        return r.pipe(res);
      }

      var buf = '';
      r.setEncoding('utf-8');
      r.on('data', function(c){ buf += c });
      r.on('end', function(){
        try {
          var obj = JSON.parse(buf);
          if (first) obj = fixTarballs(obj);
          var json = JSON.stringify(obj, null, 2);
          r.headers['content-length'] = Buffer.byteLength(json);
          res.writeHead(r.statusCode, r.headers);
          res.end(json);
        } catch (err) {
          res.writeHead(r.statusCode, r.headers);
          res.end(buf);
        }
      });
    });

    r.on('error', function(err){
      console.error(err.stack);
      if (!last) proxy();
    });

    req.pipe(r);
  }

  proxy();
});

// lame shit to fix tarballs

function fixTarballs(obj) {
  for (var k in obj.versions) {
    var ver = obj.versions[k];
    var tar = parse(ver.dist.tarball);
    ver.dist.tarball = url + tar.path;
  }

  return obj;
}

// listen

app.listen(port);
console.log('listening on port %s', port);